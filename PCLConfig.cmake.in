# Helper to use PCL from outside project
#
# target_link_libraries(my_fabulous_target pcl_xxx) where xxx is in
# - common
# - octree
# - io
# - kdtree
# - range_image
# - features
# - range_image_border_extractor
# - sample_consensus
# - keypoints
# - filters
# - registration
# - segmentation
# - surface
# - visualization

# Tested with:
# -PCL 1.0
#
# www.pointclouds.org
# --------------------------------
set(PCL_INCLUDE_DIRS "@CMAKE_INSTALL_PREFIX@/@INCLUDE_INSTALL_ROOT@")
set(PCL_LIBRARY_DIRS "@CMAKE_INSTALL_PREFIX@/@LIB_INSTALL_DIR@")
include("@CMAKE_INSTALL_PREFIX@/@LIB_INSTALL_DIR@/pcl/PCLDepends.cmake")

if("@PCL_SUBSYS_STATUS_common@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS common)
endif("@PCL_SUBSYS_STATUS_common@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_io@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS io)
endif("@PCL_SUBSYS_STATUS_io@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_filters@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS filters)
endif("@PCL_SUBSYS_STATUS_filters@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_features@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS features)
endif("@PCL_SUBSYS_STATUS_features@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_kdtree@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS kdtree)
endif("@PCL_SUBSYS_STATUS_kdtree@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_octree@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS octree)
endif("@PCL_SUBSYS_STATUS_octree@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_range_image@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS range_image)
  list(APPEND PCL_COMPONENTS range_image_border_extractor)
endif("@PCL_SUBSYS_STATUS_range_image@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_surface@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS surface)
endif("@PCL_SUBSYS_STATUS_surface@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_sample_consensus@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS sample_consensus)
endif("@PCL_SUBSYS_STATUS_sample_consensus@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_registration@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS registration)
endif("@PCL_SUBSYS_STATUS_registration@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_segmentation@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS segmentation)
endif("@PCL_SUBSYS_STATUS_segmentation@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_visualization@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS visualization)
endif("@PCL_SUBSYS_STATUS_visualization@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_keypoints@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS keypoints)
endif("@PCL_SUBSYS_STATUS_keypoints@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_cuda@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS cuda)
endif("@PCL_SUBSYS_STATUS_cuda@" STREQUAL "TRUE")

if(PCL_FIND_COMPONENTS)
  foreach(comp ${PCL_FIND_COMPONENTS})
    list(FIND PCL_COMPONENTS ${comp} found)
    if(found EQUAL -1)
      message(FATAL_ERROR "requested components ${comp} not found")
    else(found EQUAL -1)
      string(TOUPPER ${comp} COMP)
      set(PCL_${COMP}_LIBRARY pcl_${comp})
      set(PCL_${COMP}_LIBRARY_DEBUG pcl_${comp})
      set(PCL_${COMP}_LIBRARIES pcl_${comp})
			list(APPEND PCL_LIBRARIES pcl_${comp})
    endif(found EQUAL -1)
  endforeach(comp)
else(PCL_FIND_COMPONENTS)
  foreach(comp ${PCL_COMPONENTS})
    string(TOUPPER ${comp} COMP)
    set(PCL_${COMP}_LIBRARY pcl_${comp})
    set(PCL_${COMP}_LIBRARY_DEBUG pcl_${comp})
    set(PCL_${COMP}_LIBRARIES pcl_${comp})
		list(APPEND PCL_LIBRARIES pcl_${comp})
  endforeach(comp)
endif(PCL_FIND_COMPONENTS)

##
# append 3rd party include dirs
##
list(APPEND PCL_INCLUDE_DIRS "@Boost_INCLUDE_DIR@")

list(APPEND PCL_INCLUDE_DIRS "@FLANN_INCLUDE_DIRS@")

list(APPEND PCL_INCLUDE_DIRS "@CMINPACK_INCLUDE_DIRS@")

list(APPEND PCL_INCLUDE_DIRS "@EIGEN_INCLUDE_DIRS@")

include ("@VTK_USE_FILE@")

if("@HAVE_OPENNI@" STREQUAL "ON")
  list(APPEND PCL_INCLUDE_DIRS "@OPENNI_INCLUDE_DIRS@")
endif("@HAVE_OPENNI@" STREQUAL "ON")

if("@HAVE_QHULL@" STREQUAL "ON")
  list(APPEND PCL_INCLUDE_DIRS "@QHULL_INCLUDE_DIRS@")
endif("@HAVE_QHULL@" STREQUAL "ON")

list(REMOVE_DUPLICATES PCL_INCLUDE_DIRS)