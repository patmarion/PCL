# Helper to use PCL from outside project
#
# target_link_libraries(my_fabulous_target pcl_xxx) where xxx is in
# - common
# - octree
# - io
# - kdtree
# - range_image
# - features
# - range_image_border_extractor
# - sample_consensus
# - keypoints
# - filters
# - registration
# - segmentation
# - surface
# - visualization

# Tested with:
# -PCL 1.0
#
# www.pointclouds.org
# --------------------------------
set(PCL_INCLUDE_DIRS "@CMAKE_INSTALL_PREFIX@/@INCLUDE_INSTALL_ROOT@")
set(PCL_LIBRARY_DIRS "@CMAKE_INSTALL_PREFIX@/@LIB_INSTALL_DIR@")
include("@CMAKE_INSTALL_PREFIX@/@LIB_INSTALL_DIR@/pcl/PCLDepends.cmake")

if("@PCL_SUBSYS_STATUS_common@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_common)
endif("@PCL_SUBSYS_STATUS_common@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_io@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_io)
endif("@PCL_SUBSYS_STATUS_io@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_filters@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_filters)
endif("@PCL_SUBSYS_STATUS_filters@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_features@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_features)
endif("@PCL_SUBSYS_STATUS_features@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_kdtree@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_kdtree)
endif("@PCL_SUBSYS_STATUS_kdtree@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_octree@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_octree)
endif("@PCL_SUBSYS_STATUS_octree@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_range_image@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_range_image)
  list(APPEND PCL_COMPONENTS pcl_range_image_border_extractor)
endif("@PCL_SUBSYS_STATUS_range_image@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_surface@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_surface)
endif("@PCL_SUBSYS_STATUS_surface@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_sample_consensus@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_sample_consensus)
endif("@PCL_SUBSYS_STATUS_sample_consensus@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_registration@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_registration)
endif("@PCL_SUBSYS_STATUS_registration@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_segmentation@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_segmentation)
endif("@PCL_SUBSYS_STATUS_segmentation@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_visualization@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_visualization)
endif("@PCL_SUBSYS_STATUS_visualization@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_keypoints@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_keypoints)
endif("@PCL_SUBSYS_STATUS_keypoints@" STREQUAL "TRUE")

if("@PCL_SUBSYS_STATUS_cuda@" STREQUAL "TRUE")
  list(APPEND PCL_COMPONENTS pcl_cuda)
endif("@PCL_SUBSYS_STATUS_cuda@" STREQUAL "TRUE")

set(PCL_LIBRARIES ${PCL_COMPONENTS})

if(PCL_FIND_COMPONENTS)
  foreach(comp ${PCL_FIND_COMPONENTS})
    list(FIND PCL_COMPONENTS pcl_${comp} found)
    if(found EQUAL -1)
      message(FATAL_ERROR "requested components ${comp} not found")
    else(found EQUAL -1)
      string(TOUPPER COMP ${comp})
      set(PCL_${COMP}_LIBRARY pcl_${comp})
      set(PCL_${COMP}_LIBRARY_DEBUG pcl_${comp})
      set(PCL_${COMP}_LIBRARIES pcl_${comp})
    endif(found EQUAL -1)
  endforeach(comp)
endif(PCL_FIND_COMPONENTS)
